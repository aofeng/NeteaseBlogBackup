/*
 * NeteaseBlogBackupGui.java
 *
 * Created on 2010-5-13, 15:43:18
 */
package cn.aofeng.netease_blog_backup;

import cn.aofeng.util.Proxy;
import cn.aofeng.util.gui.GuiUtils;

import java.awt.Color;
import java.awt.Component;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JEditorPane;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ProgressMonitor;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

/**
 * 网易博客日志备份工具界面.
 *
 * @author 聂勇 <a href="mailto:nieyong@asiainfo.com">nieyong@asiainfo.com</a>
 */
@SuppressWarnings("serial")
public class NeteaseBlogBackupGui extends javax.swing.JFrame {

    /** Creates new form NeteaseBlogBackupGui */
    public NeteaseBlogBackupGui() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonGroup = new javax.swing.ButtonGroup();
        basePanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        blogBackupParamPanel = new javax.swing.JPanel();
        blogAddressLabel = new javax.swing.JLabel();
        blogAddressTextField = new javax.swing.JTextField();
        blogUserNameLabel = new javax.swing.JLabel();
        blogUserNameTextField = new javax.swing.JTextField();
        blogUserIdLabel = new javax.swing.JLabel();
        blogUserIdTextField = new javax.swing.JTextField();
        blogLogTotalNumLabel = new javax.swing.JLabel();
        blogLogTotalNumTextField = new javax.swing.JTextField();
        backupStartSeqNumLabel = new javax.swing.JLabel();
        backupStartSeqNumTextField = new javax.swing.JTextField();
        backupEndSeqNumLabel = new javax.swing.JLabel();
        backupEndSeqNumTextField = new javax.swing.JTextField();
        backupContentPartLabel = new javax.swing.JLabel();
        backupContentPartComboBox = new javax.swing.JComboBox();
        saveDirectoryLabel = new javax.swing.JLabel();
        saveDirectoryTextField = new javax.swing.JTextField();
        saveDirectoryOpenButton = new javax.swing.JButton();
        backupParamConfigureNextButton = new javax.swing.JButton();
        retriveBlogHostInfoButton = new javax.swing.JButton();
        blogBackupPanel = new javax.swing.JPanel();
        blogLogListLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        blogLogListTable = new javax.swing.JTable();
        backupButton = new javax.swing.JButton();
        proxyConfigurePanel = new javax.swing.JPanel();
        proxyConfigureComponentPanel = new javax.swing.JPanel();
        proxyHostLabel = new javax.swing.JLabel();
        proxyHostTextField = new javax.swing.JTextField();
        proxyPortLabel = new javax.swing.JLabel();
        proxyPortTextField = new javax.swing.JTextField();
        notUseProxyLabel = new javax.swing.JLabel();
        notUseProxyTextField = new javax.swing.JTextField();
        saveProxyConfigureButton = new javax.swing.JButton();
        isUserProxyLabel = new javax.swing.JLabel();
        useProxyRadioButton = new javax.swing.JRadioButton();
        notUseProxyRadioButton = new javax.swing.JRadioButton();
        aboutAuthorPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("傲风-网易博客备份工具");
        setIconImage(GuiUtils._applicationIcon);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        blogAddressLabel.setText("博客地址:");

        blogAddressTextField.setText("http://aofengblog.blog.163.com");

        blogUserNameLabel.setText("博客用户名:");

        blogUserNameTextField.setEditable(false);

        blogUserIdLabel.setText("博客用户ID:");

        blogUserIdTextField.setEditable(false);

        blogLogTotalNumLabel.setText("博客日志总数:");

        backupStartSeqNumLabel.setText("备份开始序号:");

        backupStartSeqNumTextField.setText("0");

        backupEndSeqNumLabel.setText("备份结束序号:");

        backupEndSeqNumTextField.setText("10");

        backupContentPartLabel.setText("备份内容选择:");

        backupContentPartComboBox.setModel(getDefaultBackupContentPartComboBoxModel());

        saveDirectoryLabel.setText("备份目录:");

        saveDirectoryOpenButton.setText("浏览...");
        saveDirectoryOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDirectoryOpenButtonActionPerformed(evt);
            }
        });

        backupParamConfigureNextButton.setText("下一步");
        backupParamConfigureNextButton.setAlignmentY(0.0F);
        backupParamConfigureNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupParamConfigureNextButtonActionPerformed(evt);
            }
        });

        retriveBlogHostInfoButton.setText("获 取");
        retriveBlogHostInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retriveBlogHostInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blogBackupParamPanelLayout = new javax.swing.GroupLayout(blogBackupParamPanel);
        blogBackupParamPanel.setLayout(blogBackupParamPanelLayout);
        blogBackupParamPanelLayout.setHorizontalGroup(
            blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                        .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(blogAddressLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(blogUserNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                                .addComponent(blogUserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(retriveBlogHostInfoButton))
                            .addComponent(blogAddressTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)))
                    .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                        .addComponent(backupContentPartLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backupContentPartComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                        .addComponent(saveDirectoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(saveDirectoryOpenButton))
                    .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(backupParamConfigureNextButton))
                    .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, blogBackupParamPanelLayout.createSequentialGroup()
                            .addComponent(backupEndSeqNumLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(backupEndSeqNumTextField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, blogBackupParamPanelLayout.createSequentialGroup()
                            .addComponent(backupStartSeqNumLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(backupStartSeqNumTextField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, blogBackupParamPanelLayout.createSequentialGroup()
                            .addComponent(blogLogTotalNumLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(blogLogTotalNumTextField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, blogBackupParamPanelLayout.createSequentialGroup()
                            .addComponent(blogUserIdLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(blogUserIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        blogBackupParamPanelLayout.setVerticalGroup(
            blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blogAddressLabel)
                    .addComponent(blogAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blogUserNameLabel)
                            .addComponent(blogUserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blogUserIdLabel)
                            .addComponent(blogUserIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blogLogTotalNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(blogLogTotalNumLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backupStartSeqNumLabel)
                            .addComponent(backupStartSeqNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(blogBackupParamPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(retriveBlogHostInfoButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backupEndSeqNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backupEndSeqNumLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backupContentPartLabel)
                    .addComponent(backupContentPartComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(blogBackupParamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveDirectoryLabel)
                    .addComponent(saveDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveDirectoryOpenButton))
                .addGap(18, 18, 18)
                .addComponent(backupParamConfigureNextButton)
                .addGap(184, 184, 184))
        );

        blogAddressLabel.getAccessibleContext().setAccessibleName("");
        blogUserNameLabel.getAccessibleContext().setAccessibleName("");
        saveDirectoryLabel.getAccessibleContext().setAccessibleName("");
        saveDirectoryOpenButton.getAccessibleContext().setAccessibleName("");
        backupParamConfigureNextButton.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("备份配置", new javax.swing.ImageIcon(getClass().getResource("/icon/configure_16_16.png")), blogBackupParamPanel); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("AofengNeteaseBlogBackupResource-zh_CN"); // NOI18N
        blogBackupParamPanel.getAccessibleContext().setAccessibleName(bundle.getString("NeteaseBlogBackupGui.blogBackupPanel.TabConstraints.tabTitle")); // NOI18N

        blogLogListLabel.setText("博客日志列表:");

        blogLogListTable.setModel(getDefaultTableModel());
        jScrollPane2.setViewportView(blogLogListTable);
        blogLogListTable.setColumnModel(getDefaultTableColumnTable());

        backupButton.setText("备 份");
        backupButton.setAlignmentY(0.0F);
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blogBackupPanelLayout = new javax.swing.GroupLayout(blogBackupPanel);
        blogBackupPanel.setLayout(blogBackupPanelLayout);
        blogBackupPanelLayout.setHorizontalGroup(
            blogBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blogBackupPanelLayout.createSequentialGroup()
                .addGroup(blogBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blogBackupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(blogLogListLabel))
                    .addGroup(blogBackupPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
                    .addGroup(blogBackupPanelLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(backupButton)))
                .addContainerGap())
        );
        blogBackupPanelLayout.setVerticalGroup(
            blogBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blogBackupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blogLogListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(backupButton)
                .addGap(145, 145, 145))
        );

        jTabbedPane1.addTab("博客备份", new javax.swing.ImageIcon(getClass().getResource("/icon/save_16_16.png")), blogBackupPanel); // NOI18N

        proxyHostLabel.setText("代理地址:");

        proxyPortLabel.setText("代理端口:");

        notUseProxyLabel.setText("不使用代理:");

        saveProxyConfigureButton.setText("保 存");
        saveProxyConfigureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProxyConfigureButtonActionPerformed(evt);
            }
        });

        isUserProxyLabel.setText("是否启用代理:");

        radioButtonGroup.add(useProxyRadioButton);
        useProxyRadioButton.setText("启用");

        radioButtonGroup.add(notUseProxyRadioButton);
        notUseProxyRadioButton.setText("不启用");

        javax.swing.GroupLayout proxyConfigureComponentPanelLayout = new javax.swing.GroupLayout(proxyConfigureComponentPanel);
        proxyConfigureComponentPanel.setLayout(proxyConfigureComponentPanelLayout);
        proxyConfigureComponentPanelLayout.setHorizontalGroup(
            proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                .addGroup(proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(saveProxyConfigureButton))
                    .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                                .addComponent(proxyHostLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proxyHostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
                            .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                                .addComponent(proxyPortLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proxyPortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
                            .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                                .addComponent(notUseProxyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(notUseProxyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))))
                    .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(isUserProxyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useProxyRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(notUseProxyRadioButton)))
                .addContainerGap())
        );
        proxyConfigureComponentPanelLayout.setVerticalGroup(
            proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxyConfigureComponentPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isUserProxyLabel)
                    .addComponent(useProxyRadioButton)
                    .addComponent(notUseProxyRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxyHostLabel)
                    .addComponent(proxyHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proxyPortLabel)
                    .addComponent(proxyPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(proxyConfigureComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notUseProxyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notUseProxyLabel))
                .addGap(18, 18, 18)
                .addComponent(saveProxyConfigureButton)
                .addContainerGap(320, Short.MAX_VALUE))
        );

        proxyHostLabel.getAccessibleContext().setAccessibleName("");
        proxyPortLabel.getAccessibleContext().setAccessibleName("");
        notUseProxyLabel.getAccessibleContext().setAccessibleName("");
        saveProxyConfigureButton.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout proxyConfigurePanelLayout = new javax.swing.GroupLayout(proxyConfigurePanel);
        proxyConfigurePanel.setLayout(proxyConfigurePanelLayout);
        proxyConfigurePanelLayout.setHorizontalGroup(
            proxyConfigurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxyConfigurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proxyConfigureComponentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        proxyConfigurePanelLayout.setVerticalGroup(
            proxyConfigurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxyConfigurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proxyConfigureComponentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("代理配置", new javax.swing.ImageIcon(getClass().getResource("/icon/proxy_server_16_16.png")), proxyConfigurePanel); // NOI18N
        proxyConfigurePanel.getAccessibleContext().setAccessibleName(bundle.getString("NeteaseBlogBackupGui.proxyConfigurePanel.TabConstraints.tabTitle")); // NOI18N

        javax.swing.GroupLayout aboutAuthorPanelLayout = new javax.swing.GroupLayout(aboutAuthorPanel);
        aboutAuthorPanel.setLayout(aboutAuthorPanelLayout);
        aboutAuthorPanelLayout.setHorizontalGroup(
            aboutAuthorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );
        aboutAuthorPanelLayout.setVerticalGroup(
            aboutAuthorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 514, Short.MAX_VALUE)
        );

        JEditorPane authorInfoPanel = GuiUtils.aboutAuthorPanel(aboutAuthorPanel);
        aboutAuthorPanelLayout.setHorizontalGroup(
            aboutAuthorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutAuthorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(authorInfoPanel)
                .addContainerGap(86, Short.MAX_VALUE))
        );
        aboutAuthorPanelLayout.setVerticalGroup(
            aboutAuthorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutAuthorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(authorInfoPanel)
                .addContainerGap(261, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("关于作者", new javax.swing.ImageIcon(getClass().getResource("/icon/about_16_16.png")), aboutAuthorPanel); // NOI18N

        javax.swing.GroupLayout basePanelLayout = new javax.swing.GroupLayout(basePanel);
        basePanel.setLayout(basePanelLayout);
        basePanelLayout.setHorizontalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        basePanelLayout.setVerticalGroup(
            basePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backupParamConfigureNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupParamConfigureNextButtonActionPerformed
        String blogAddressValue = this.blogAddressTextField.getText();
        if (StringUtils.isBlank(blogAddressValue)) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "博客地址为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.blogAddressTextField.requestFocus();

            return;
        }

        String blogUserNameValue = this.blogUserNameTextField.getText();
        if (StringUtils.isBlank(blogUserNameValue)) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "博客用户名为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.blogUserNameTextField.requestFocus();

            return;
        }

        String blogUserIdValue = this.blogUserIdTextField.getText();
        if (StringUtils.isBlank(blogUserIdValue)) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "博客用户ID为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.blogUserIdTextField.requestFocus();

            return;
        }

        String backupStartSeqNumValue = this.backupStartSeqNumTextField.getText();
        if (StringUtils.isBlank(backupStartSeqNumValue)) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "备份开始序列号为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.backupStartSeqNumTextField.requestFocus();

            return;
        }

        String backupEndSeqNumValue = this.backupEndSeqNumTextField.getText();
        if (StringUtils.isBlank(backupEndSeqNumValue)) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "备份结束序列号为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.backupEndSeqNumTextField.requestFocus();

            return;
        }

        String saveDirectoryTextFieldValue = this.saveDirectoryTextField.getText();
        if (StringUtils.isBlank(saveDirectoryTextFieldValue)) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "备份目录为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.saveDirectoryTextField.requestFocus();
            
            return;
        }

        if (_logger.isInfoEnabled()) {
            _logger.info(String.format("Start analysing blog [%s] info", blogAddressValue));
        }

        String blogLogApiAddressValue = String.format(blogLogApiAddress, blogUserNameValue);
        String blogLogApiParamTextAreaValue = String.format(blogLogApiParam, blogUserIdValue, backupStartSeqNumValue, backupEndSeqNumValue);

        NeteaseBlogBackup blogBackUp = new NeteaseBlogBackup();
    	List<BlogLogInfo> blogLogInfos = blogBackUp.collectBlogLogLink(blogAddressValue, blogLogApiAddressValue, blogLogApiParamTextAreaValue);

    	if (_logger.isInfoEnabled()) {
            _logger.info(String.format("Analyse blog info over, a total of %s log", blogLogInfos.size()));
		}
    	
    	getDefaultTableModel().clear();
        int newDataStartRowIndex = getDefaultTableModel().getRowCount();
        getDefaultTableModel().fireTableRowsDeleted(0, newDataStartRowIndex);
    	for (int i = 0; i < blogLogInfos.size(); i++) {
    		BlogLogInfo blogLogInfo = blogLogInfos.get(i);

            getDefaultTableModel().addBlogLogInfo(blogLogInfo);
		}
        int newDataEndRowIndex = getDefaultTableModel().getRowCount();
        getDefaultTableModel().fireTableRowsInserted(0, newDataEndRowIndex);

        this.jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_backupParamConfigureNextButtonActionPerformed

    private boolean isUserProxy() {
        if (this.useProxyRadioButton.isSelected()) {
            return true;
        }

        return false;
    }

    private void saveProxyConfigureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProxyConfigureButtonActionPerformed
        boolean isUseProxy = isUserProxy();
        String proxyHostValue = this.proxyHostTextField.getText();
        int proxyPortValue    = Integer.parseInt(this.proxyPortTextField.getText());

        // 设置内存中的值
        Proxy proxy = Proxy.getInstance();
        proxy.setProxyHost(proxyHostValue);
        proxy.setProxyPort(proxyPortValue);
        proxy.setUseProxy(isUseProxy);
        proxy.setNotUseProxyExp(this.notUseProxyTextField.getText());

        // 保存到文件
        boolean saveSuccess = NeteaseBlogBackupHelp.saveProxyConfigureInfo(proxy);
        if (saveSuccess) {
            JOptionPane.showMessageDialog(this.proxyConfigurePanel,
                    "保存代理配置信息成功！", "成功", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this.proxyConfigurePanel,
                    "保存代理配置信息失败！", "失败", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_saveProxyConfigureButtonActionPerformed

    private void saveDirectoryOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDirectoryOpenButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int action = fileChooser.showOpenDialog(this.blogBackupPanel);
        if (JFileChooser.APPROVE_OPTION == action) {
            this.saveDirectoryTextField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_saveDirectoryOpenButtonActionPerformed

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        this.backupButton.setEnabled(false);

        Thread backupThread = new Thread(new Runnable() {
        
            @Override
            public void run() {
                int logNum = getDefaultTableModel().getRowCount();

                ProgressMonitor progressMonitor = new ProgressMonitor(basePanel, "备份博客日志", "", 0, logNum);
                progressMonitor.setMillisToPopup(0);
                progressMonitor.setMillisToDecideToPopup(0);

                for (int i = 0; i < logNum; i++) {
                    // 处理进度条的取消动作
                    if (progressMonitor.isCanceled()) {
                        if (_logger.isInfoEnabled()) {
                            _logger.info("User cancel backup");
                        }
                        
                        break;
                    }
                    
                    BlogLogInfo blogLogInfo = new BlogLogInfo();
                    blogLogInfo.setTitle((String) getDefaultTableModel().getValueAt(i, 2));
                    blogLogInfo.setLink((String) getDefaultTableModel().getValueAt(i, 3));

                    progressMonitor.setProgress(i);

                    Boolean isSelect = (Boolean) getDefaultTableModel().getValueAt(i, 1);
                    if (isSelect) {
                        if (_logger.isInfoEnabled()) {
                            _logger.info(String.format("Start backuping log:", blogLogInfo.toString()));
                        }

                        progressMonitor.setNote("正在备份日志:" + blogLogInfo.getTitle());

                        Runnable job = new MhtGenerator(blogLogInfo, 
                        		saveDirectoryTextField.getText(), 
                        		BackupContentPartComboBoxItem.mapBackupContentPartXPath(
                        				((BackupContentPartComboBoxItem) backupContentPartComboBox.getSelectedItem()).getValue()));
                        job.run();

                        if (_logger.isInfoEnabled()) {
                            _logger.info(String.format("Backup log [%s] over", blogLogInfo.toString()));
                        }
                    }
                }
                progressMonitor.close();
                backupButton.setEnabled(true);
            }
            
        });
        backupThread.start();
    }//GEN-LAST:event_backupButtonActionPerformed

    private void retriveBlogHostInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retriveBlogHostInfoButtonActionPerformed
        if (StringUtils.isBlank(blogAddressTextField.getText())) {
            JOptionPane.showMessageDialog(this.blogBackupPanel, "博客地址为空！", "提示",
                    JOptionPane.INFORMATION_MESSAGE);
            this.blogAddressTextField.requestFocus(true);
        }
        
        String retriveBlogHostInfoUrl = assembleBlogHostInfoRetriveUrl();
        NeteaseBlogBackup blogBackUp = new NeteaseBlogBackup();
        BlogInfo blogInfo = blogBackUp.retriveBlogInfo(retriveBlogHostInfoUrl);
        if (null != blogInfo) {
			blogUserNameTextField.setText(blogInfo.getHostName());
			blogUserIdTextField.setText(blogInfo.getHostId());
		} else {
			JOptionPane.showMessageDialog(this.blogBackupPanel, "解析博客信息失败！", "错误",
                    JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_retriveBlogHostInfoButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                GuiUtils.usePlasticXPThemeStyle();
                NeteaseBlogBackupGui gui = new NeteaseBlogBackupGui();
                gui.setVisible(true);

                gui.loadProxyConfigure();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aboutAuthorPanel;
    private javax.swing.JButton backupButton;
    private javax.swing.JComboBox backupContentPartComboBox;
    private javax.swing.JLabel backupContentPartLabel;
    private javax.swing.JLabel backupEndSeqNumLabel;
    private javax.swing.JTextField backupEndSeqNumTextField;
    private javax.swing.JButton backupParamConfigureNextButton;
    private javax.swing.JLabel backupStartSeqNumLabel;
    private javax.swing.JTextField backupStartSeqNumTextField;
    private javax.swing.JPanel basePanel;
    private javax.swing.JLabel blogAddressLabel;
    private javax.swing.JTextField blogAddressTextField;
    private javax.swing.JPanel blogBackupPanel;
    private javax.swing.JPanel blogBackupParamPanel;
    private javax.swing.JLabel blogLogListLabel;
    private javax.swing.JTable blogLogListTable;
    private javax.swing.JLabel blogLogTotalNumLabel;
    private javax.swing.JTextField blogLogTotalNumTextField;
    private javax.swing.JLabel blogUserIdLabel;
    private javax.swing.JTextField blogUserIdTextField;
    private javax.swing.JLabel blogUserNameLabel;
    private javax.swing.JTextField blogUserNameTextField;
    private javax.swing.JLabel isUserProxyLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel notUseProxyLabel;
    private javax.swing.JRadioButton notUseProxyRadioButton;
    private javax.swing.JTextField notUseProxyTextField;
    private javax.swing.JPanel proxyConfigureComponentPanel;
    private javax.swing.JPanel proxyConfigurePanel;
    private javax.swing.JLabel proxyHostLabel;
    private javax.swing.JTextField proxyHostTextField;
    private javax.swing.JLabel proxyPortLabel;
    private javax.swing.JTextField proxyPortTextField;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JButton retriveBlogHostInfoButton;
    private javax.swing.JLabel saveDirectoryLabel;
    private javax.swing.JButton saveDirectoryOpenButton;
    private javax.swing.JTextField saveDirectoryTextField;
    private javax.swing.JButton saveProxyConfigureButton;
    private javax.swing.JRadioButton useProxyRadioButton;
    // End of variables declaration//GEN-END:variables


    // ============================ 自定义变量区 ============================
    
    private DefaultTableModel _tableModel = new DefaultTableModel();

    /**
     * 获取博客信息的URL（相对于博客主页地址的相对路径）.
     */
    private String blogHostInfoSubUrl = "profile";

    /** 
     * 博客日志API地址
     */
    private String blogLogApiAddress = "http://api.blog.163.com/%s/dwr/call/plaincall/BlogBeanNew.getBlogs.dwr";

    /**
     * 博客日志API参数
     */
    private String blogLogApiParam = "?callCount=1&scriptSessionId=187&c0-scriptName=BlogBeanNew&c0-methodName=getBlogs&c0-id=0&c0-param0=number:%s&c0-param1=number:%s&c0-param2=number:%s&batchId=369781";

    private static final Logger _logger = Logger.getLogger(NeteaseBlogBackupGui.class);


    
    // ============================ 自定义方法区 ============================

    /**
     * 生成"获取博客信息"的URL.
     */
    private String assembleBlogHostInfoRetriveUrl() {
        String blogAddress = blogAddressTextField.getText();
        String blogHostInfoRetriveUrl = cn.aofeng.util.StringUtils.assemblePath(blogAddress, blogHostInfoSubUrl);
        
        return blogHostInfoRetriveUrl;
    }

    private DefaultBackupContentPartComboBoxModel getDefaultBackupContentPartComboBoxModel() {
        BackupContentPartComboBoxItem[] items = new BackupContentPartComboBoxItem[2];
        items[0] = new BackupContentPartComboBoxItem("日志整个页面", BackupContentPartComboBoxItem.CONTENT_ALL);
        items[1] = new BackupContentPartComboBoxItem("日志正文部分", BackupContentPartComboBoxItem.CONTENT_BODY);

        DefaultBackupContentPartComboBoxModel model = new DefaultBackupContentPartComboBoxModel(items);
        model.setSelectedItem(items[1]);

        return model;
    }

    private DefaultTableModel getDefaultTableModel() {
        return _tableModel;
    }

    private TableCellRenderer getDefaultTableCellRenderer() {
        TableCellRenderer tableCellRenderer = new DefaultCellRenderer();

        return tableCellRenderer;
    }

    private TableColumnModel getDefaultTableColumnTable() {
        TableColumnModel columnModel = this.blogLogListTable.getColumnModel();
        TableColumn indexColumn = columnModel.getColumn(0);
        indexColumn.setPreferredWidth(50);
        indexColumn.setMaxWidth(50);
        indexColumn.setResizable(false);
        indexColumn.setCellRenderer(getDefaultTableCellRenderer());

        TableColumn selectColumn = columnModel.getColumn(1);
        selectColumn.setPreferredWidth(30);
        selectColumn.setMaxWidth(30);
        selectColumn.setResizable(false);

        // TODO 给每个单元格设置Renderer

        return columnModel;
    }

    private void loadProxyConfigure() {
        NeteaseBlogBackupHelp.loadProxyConfigureInfo();

        Proxy proxy = Proxy.getInstance();
        proxyHostTextField.setText(proxy.getProxyHost());
        proxyPortTextField.setText(String.valueOf(proxy.getProxyPort()));
        notUseProxyTextField.setText(proxy.getNotUseProxyExp());
        if (proxy.isUseProxy()) {
            useProxyRadioButton.setSelected(true);
        } else {
            notUseProxyRadioButton.setSelected(true);
        }
    }



    // ============================ 自定义类区 ============================

    /**
     * 备份内容选择-下拉框模型.
     */
    class DefaultBackupContentPartComboBoxModel extends DefaultComboBoxModel {
    	
		private static final long serialVersionUID = 5094251410836717450L;

		public DefaultBackupContentPartComboBoxModel() {
            
        }

        public DefaultBackupContentPartComboBoxModel(final Object items[]) {
            super(items);
        }

        @SuppressWarnings("unchecked")
		public DefaultBackupContentPartComboBoxModel(Vector v) {
            super(v);
        }
    }

    /**
     * 博客日志备份列表-单元格模型.
     */
    class DefaultCellRenderer extends DefaultTableCellRenderer {
    	
		private static final long serialVersionUID = 1247607548144585512L;

		@Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                          boolean isSelected, boolean hasFocus, int row, int column) {
        	Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        	
            // 序号列置成淡灰色
            if (0 == column) {
            	cell.setBackground(Color.LIGHT_GRAY);
            } else {
                // 设置奇偶行颜色
                if (0 != (row &1)) {
                	cell.setBackground(Color.WHITE);
                } else {
                	cell.setBackground(Color.YELLOW);
                }
            }
            
            return cell;
        }
    }

    /**
     * 博客日志备份列表-表模型.
     */
    class DefaultTableModel extends AbstractTableModel {
    	
		private static final long serialVersionUID = -7892896688807653031L;

		@SuppressWarnings("unchecked")
		private Class[] _columnClasses ={Integer.class, Boolean.class, String.class, String.class};

        private String[] _columnNames = {"序号","选择", "日志标题", "日志链接"};

        private List<Object[]> _dataList = new ArrayList<Object[]>();

        public void addBlogLogInfo(BlogLogInfo blogLogInfo) {
            if (null != blogLogInfo) {
                Object[] data = {0, Boolean.TRUE, blogLogInfo.getTitle(), blogLogInfo.getLink()};
                _dataList.add(data);
            }
        }
        
        public void clear() {
            _dataList.clear();
        }

        @Override
        public String getColumnName(int column) {
            return _columnNames[column];
        }
        
        @SuppressWarnings("unchecked")
		@Override
        public Class getColumnClass(int columnIndex) {
            return _columnClasses[columnIndex];
        }

        @Override
        public int getRowCount() {
            return _dataList.size();
        }

        @Override
        public int getColumnCount() {
            return _columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (0 == columnIndex) {
                return rowIndex+1;
            }

            return _dataList.get(rowIndex)[columnIndex];
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            _dataList.get(rowIndex)[columnIndex] = aValue;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex > 0) {
                return true;
            }

            return false;
        }
    }

}
